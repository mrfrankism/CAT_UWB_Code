package Package;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileReader;
import java.io.FileInputStream;
import java.io.BufferedReader;
import java.io.PrintWriter;

import javax.swing.*;

import jssc.*;

public class ScanningFromManyReceivers extends JPanel implements ActionListener{
	
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	static private final String newline = "\n";
    JButton setDirectoryButton, stopButton, startButton;
    JTextField textField, timeBetweenScans, amountOfScansPerFile;
    JLabel delayBetweenScans, scansPerFile;
    public static JTextArea log;
    JFileChooser fc;
    static Radio [] devices;
    boolean directorySet = false;
    String defaultDir = "C:\\Users\\Public\\";
	
  public ScanningFromManyReceivers(){
   
	  super(new BorderLayout());
	 
    //Create the log first, because the action listeners
    //need to refer to it.
    log = new JTextArea(7,25);
    log.setMargin(new Insets(5,5,5,5));
    log.setEditable(false);
    JScrollPane logScrollPane = new JScrollPane(log);

    //Create a file chooser
    fc = new JFileChooser();

    //Uncomment one of the following lines to try a different
    //file selection mode.  The first allows just directories
    //to be selected (and, at least in the Java look and feel,
    //shown).  The second allows both files and directories
    //to be selected.  If you leave these lines commented out,
    //then the default mode (FILES_ONLY) will be used.
    //
    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    //fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

    //Create the open button.  We use the image from the JLF
    //Graphics Repository (but we extracted it from the jar).
    setDirectoryButton = new JButton("Set Directory");
    setDirectoryButton.addActionListener(this);

    //Create the save button.  We use the image from the JLF
    //Graphics Repository (but we extracted it from the jar).
    startButton = new JButton("Start Scans");
    startButton.addActionListener(this);

    stopButton = new JButton("Stop Scans");
    stopButton.addActionListener(this);
    //For layout purposes, put the buttons in a separate panel
    JPanel buttonPanel = new JPanel(); //use FlowLayout
    buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.X_AXIS));
    buttonPanel.add(setDirectoryButton);
    buttonPanel.add(Box.createHorizontalGlue());
    buttonPanel.add(startButton);
    buttonPanel.add(Box.createHorizontalGlue());
    buttonPanel.add(stopButton);
    
    delayBetweenScans = new JLabel("Enter Delay Between Scans");
    scansPerFile = new JLabel("Enter Amount of Scans Per File");
    amountOfScansPerFile = new JTextField(1);
    amountOfScansPerFile.addActionListener(this);;
    timeBetweenScans = new JTextField(1);
    timeBetweenScans.addActionListener(this);
    JPanel textFieldPanel = new JPanel();
    textFieldPanel.setLayout(new BoxLayout(textFieldPanel, BoxLayout.Y_AXIS));
    textFieldPanel.add(scansPerFile);
    textFieldPanel.add(amountOfScansPerFile);
    textFieldPanel.add(delayBetweenScans);
    textFieldPanel.add(timeBetweenScans);
    
   /*
    JPanel buttonPanel2 = new JPanel(); 
    buttonPanel2.setLayout(new BoxLayout(buttonPanel2, BoxLayout.X_AXIS));
    JButton poop = new JButton("poop");
    buttonPanel2.add(poop);
    add(buttonPanel2, BorderLayout.NORTH);
*/
    
    
    add(textFieldPanel, BorderLayout.EAST);
    //Add the buttons and the log to this panel.
    add(buttonPanel, BorderLayout.NORTH);
 
    add(logScrollPane, BorderLayout.CENTER);
    log.append("WARNING! \nCURRENTLY USING DEFAULT SETTINGS \n" + "Directory: " + Radio.getDirectory()  + "\nDelay: " + Radio.getDelay() + " Number of Scans: " + Radio.getNumberOfScans());
}

public void actionPerformed(ActionEvent e) {

    //Handle open button action.
    if (e.getSource() == setDirectoryButton) {
        int returnVal = fc.showOpenDialog(ScanningFromManyReceivers.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
           String directory = fc.getSelectedFile().getAbsolutePath(); //choose the root directory where all the sets of data will be stored
           int x = 0;
           while(new File(directory + "\\set" + x).exists()) x++; //find a directory that doesn't yet exist
           new File(directory + "\\set" + x).mkdirs();//creates the directory as well as any parent directories that are missing
           directorySet = true;
           Radio.setDirectory(directory + "\\set" + x); //this creates different sets of data every time the program runs
           log.append("Set Directory to: " + directory + "\\set" + x + newline);//tells the user that the directory has been changed
        } else {
            log.append("Open command cancelled by user." + newline);
        }
        log.setCaretPosition(log.getDocument().getLength());

    //Handle save button action.
    } else if (e.getSource() == stopButton) { //used to stop automation process in between scans
    	
    	}
    else if (e.getSource() == startButton){
    	if(directorySet == false){
    		 int x = 0;
             while(new File(defaultDir + "\\set" + x).exists()) x++; //find a directory that doesn't yet exist
             new File(defaultDir + "\\set" + x).mkdirs();//creates the directory as well as any parent directories that are missing
             Radio.setDirectory(defaultDir + "\\set" + x); //this creates different sets of data every time the program runs
    	}
    	log.append("The current directory is " + defaultDir );
    	for(Radio r : devices){
			r.start(); // starts the scanning method for each radio
			log.append("Starting P410 Devices to scan");
    	}
    	while(Radio.activeCount() > 0){// wait for all the thread to finish collecting data
				log.append("Wait for the P410s to finish collecting scan data");
			}
		
    }
    else if(e.getSource() == timeBetweenScans){
    	Radio.setDelay(Integer.parseInt(timeBetweenScans.getText()));
    	timeBetweenScans.selectAll();
    	redisplaySettings();
    }
    else if(e.getSource() == amountOfScansPerFile){
    	Radio.setNumberOfScans(Byte.parseByte(amountOfScansPerFile.getText()));
    	amountOfScansPerFile.selectAll();
    	redisplaySettings();
    }
    }

public void redisplaySettings(){
	log.append("\n \n-CURRENT SETTINGS- \n" + "Directory: " + Radio.getDirectory()  + "\nDelay: " + Radio.getDelay() + " Number of Scans: " + Radio.getNumberOfScans());

}
/**
 * Create the GUI and show it.  For thread safety,
 * this method should be invoked from the
 * event dispatch thread.
 */
private static void createAndShowGUI() {
    //Create and set up the window.
    JFrame frame = new JFrame("FileChooserDemo");
    frame.setResizable(false);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    //Add content to the window.
    frame.add(new ScanningFromManyReceivers());

    //Display the window.
    frame.pack();
    frame.setVisible(true);
}
	public static void main(String[] args) { // arrays that hold radio commands
		byte amountOfScansPerFile = 1;
		devices = new Radio[ SerialPortList.getPortNames().length]; // creates an object that handles communication with the Transceivers
		for (String s : SerialPortList.getPortNames()){ //creates and sets up serial port objects for each com
			int i = 0;
			devices[i] = new Radio(s, amountOfScansPerFile);
			i++;
		}
		
		
		try{
		if((new File("C:\\Users\\Public\\settings.txt")).createNewFile()){
			PrintWriter out = new PrintWriter(new File("C:\\Users\\Public\\settings.txt"));
			out.println(Radio.getDirectory());
			out.println(Radio.getDelay());
			out.println(Radio.getNumberOfScans());
			out.flush();
			out.close();
		}else{
			System.out.println("here");
			BufferedReader input = new BufferedReader(new FileReader("C:\\Users\\Public\\settings.txt"));
			Radio.setDirectory(input.readLine());
			Radio.setDelay(Integer.parseInt(input.readLine()));
			Radio.setNumberOfScans(Byte.parseByte(input.readLine()));
			input.close();
		}
		
		}catch(Exception e){
			System.out.println("Error reading settings File...\n" + e );
		}
		
		SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                //Turn off metal's use of bold fonts
                UIManager.put("swing.boldMetal", Boolean.FALSE); 
                createAndShowGUI();
            }
        });
	
	}

	
	}

